---
// Props: questions OR quiz
const questions = Astro.props.questions ?? Astro.props.quiz ?? [];
const uid = `quiz-${Math.random().toString(36).slice(2)}`;
const encoded = encodeURIComponent(JSON.stringify(questions));
---
<head>
  <meta charset="UTF-8" />
</head>
<style>
/* Quiz card */
.quiz-card {
  background-color: var(--bg, #fff);
  color: var(--fg, #111);
  border-radius: 0.5rem;
  box-shadow: 0 2px 6px rgba(0,0,0,0.08);
  padding: 1.5rem;
  margin-top: 1rem;
}

.quiz-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.quiz-header h3 {
  font-size: 1.25rem;
  font-weight: 600;
}

.quiz-header span {
  font-size: 0.875rem;
  color: var(--text-muted, #555);
}

/* Question block */
.quiz-form .q {
  margin-bottom: 1rem;
}

.quiz-form .q p {
  font-weight: 500;
  margin-bottom: 0.5rem;
}

/* Options */
.quiz-form label {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.5rem 0.75rem;
  border-radius: 0.375rem;
  border: 1px solid transparent;
  cursor: pointer;
  transition: all 0.2s;
}

.quiz-form input[type="radio"] {
  accent-color: #0284c7; /* nice blue radio */
}

.quiz-form label:hover {
  background-color: var(--hover-bg, #f3f4f6);
}

.quiz-form label.correct {
  background-color: #dcfce7; /* green */
  border-color: #4ade80;
}

.quiz-form label.incorrect {
  background-color: #fee2e2; /* red */
  border-color: #f87171;
}

/* Buttons */
.quiz-actions {
  display: flex;
  gap: 0.5rem;
  align-items: center;
  margin-top: 1rem;
}

.quiz-actions button {
  padding: 0.5rem 1rem;
  border-radius: 0.375rem;
  border: none;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
}

.quiz-actions button.submit {
  background-color: #0284c7;
  color: white;
}

.quiz-actions button.submit:hover {
  background-color: #0369a1;
}

.quiz-actions button.reset {
  background-color: var(--bg, #fff);
  border: 1px solid #cbd5e1;
  color: var(--fg, #111);
}

.quiz-actions button.reset:hover {
  background-color: #f3f4f6;
}

/* Result */
.quiz-actions [data-result] {
  margin-left: auto;
  font-weight: 500;
  color: var(--text-muted, #555);
}

/* Dark mode */
:root[data-theme="dark"] .quiz-card {
  background-color: #1e293b;
  color: #f1f5f9;
}

:root[data-theme="dark"] .quiz-form label:hover {
  background-color: #334155;
}

:root[data-theme="dark"] .quiz-form label.correct {
  background-color: #166534;
  border-color: #22c55e;
  color: #dcfce7;
}

:root[data-theme="dark"] .quiz-form label.incorrect {
  background-color: #991b1b;
  border-color: #f87171;
  color: #fee2e2;
}

:root[data-theme="dark"] .quiz-actions button.reset {
  background-color: #1e293b;
  border-color: #334155;
  color: #f1f5f9;
}

:root[data-theme="dark"] .quiz-actions button.reset:hover {
  background-color: #334155;
}
.quiz-form label.correct {
  background-color: #dcfce7;
  border-color: #4ade80;
  position: relative;
}

.quiz-form label.incorrect {
  background-color: #fee2e2;
  border-color: #f87171;
  position: relative;
}

.quiz-form label span {
  margin-left: 0.25rem;
}

</style>

  <body>

<div class="quiz-card" data-uid={uid} data-questions={encoded} aria-live="polite">
  <div class="quiz-header">
    <h3>Test Your Knowledge</h3>
    <span>{questions.length} question{questions.length === 1 ? "" : "s"}</span>
  </div>

  {questions.length === 0 ? (
    <p>No quiz attached to this lesson.</p>
  ) : (
    <form class="quiz-form" aria-label="Lesson quiz">
      {questions.map((q, i) => (
        <div class="q" data-qi={i}>
          <p>{i + 1}. {q.question}</p>
          {q.options.map((opt, oi) => (
            <label>
              <input type="radio" name={`q-${i}`} value={oi} />
              <span>{opt}</span>
            </label>
          ))}
        </div>
      ))}

      <div class="quiz-actions">
        <button type="button" data-action="submit" class="submit">Submit</button>
        <button type="button" data-action="reset" class="reset">Reset</button>
        <div data-result></div>
      </div>
    </form>
  )}
</div>
  </body>



<!-- <div class="bg-white shadow-sm rounded-md p-4 dark:bg-slate-800" data-uid={uid} data-questions={encoded} aria-live="polite">
  <div class="flex items-center justify-between mb-3">
    <h3 class="text-lg font-semibold">Test Your Knowledge</h3>
    <span class="text-sm text-slate-500 dark:text-slate-400">{questions.length} question{questions.length === 1 ? "" : "s"}</span>
  </div>

  {questions.length === 0 ? (
    <p class="text-sm text-slate-500">No quiz attached to this lesson.</p>
  ) : (
    <>
      <form class="quiz-form space-y-4" aria-label="Lesson quiz">
        {questions.map((q, i) => (
          <div class="q" data-qi={i}>
            <p class="font-medium">{i + 1}. {q.question}</p>
            <div class="grid gap-2 mt-2">
              {q.options.map((opt, oi) => (
                <label class="flex items-center gap-3 p-2 rounded-md hover:bg-slate-50 dark:hover:bg-slate-700">
                  <input type="radio" name={`q-${i}`} value={oi} class="h-4 w-4" />
                  <span class="text-sm">{opt}</span>
                </label>
              ))}
            </div>
          </div>
        ))}

        <div class="flex items-center gap-3">
          <button type="button" data-action="submit" class="px-4 py-2 rounded-md bg-sky-600 text-white hover:bg-sky-700">Submit</button>
          <button type="button" data-action="reset" class="px-3 py-2 rounded-md bg-white border dark:bg-slate-700 dark:border-slate-700">Reset</button>
          <div class="ml-auto text-sm text-slate-500" data-result></div>
        </div>
      </form>
    </>
  )}
</div> -->

<script client:load>
(() => {
  document.querySelectorAll('[data-uid]').forEach(root => {
    const uid = root.getAttribute('data-uid');
    const encoded = root.getAttribute('data-questions');
    if (!encoded) return;
    let questions = [];
    try { questions = JSON.parse(decodeURIComponent(encoded) || '[]'); if (!Array.isArray(questions)) questions = []; }
    catch (err) { console.error('Quiz parse error', err); return; }

    const form = root.querySelector('.quiz-form');
    const submitBtn = root.querySelector('button[data-action="submit"]');
    const resetBtn = root.querySelector('button[data-action="reset"]');
    const resultEl = root.querySelector('[data-result]');
    if (!form || !submitBtn || !resetBtn || !resultEl) return;

    let submitted = false;

    function disableInputs(d) { form.querySelectorAll('input[type="radio"]').forEach(i => i.disabled = d); }
    function clear() { form.querySelectorAll('label').forEach(l => l.classList.remove('bg-green-50','bg-red-50','border','border-green-300','border-red-300')); }

    function showResults() {
      if (submitted) return;
      submitted = true;
      let score = 0;
      questions.forEach((q, qi) => {
        const selected = form.querySelector(`input[name="q-${qi}"]:checked`);
        const correct = Number(q.answer);
        const qRoot = form.querySelector(`.q[data-qi="${qi}"]`);
        if (!qRoot) return;

        const labels = Array.from(qRoot.querySelectorAll('label'));
        labels.forEach((lab, idx) => {
          // mark correct
          if (idx === correct) {
            lab.classList.add('bg-green-50','border','border-green-300');
          }
        });

        if (selected) {
          const chosen = Number(selected.value);
          if (chosen === correct) score++;
          else {
            const chosenLabel = selected.closest('label');
            if (chosenLabel) chosenLabel.classList.add('bg-red-50','border','border-red-300');
          }
        }
      });

      disableInputs(true);
      resultEl.textContent = `Score: ${score} / ${questions.length}`;
    }

    function resetQuiz() {
      submitted = false;
      clear();
      resultEl.textContent = '';
      form.querySelectorAll('input[type="radio"]').forEach(i => i.checked = false);
      disableInputs(false);
      const first = form.querySelector('input[type="radio"]');
      if (first) first.focus();
    }

    submitBtn.addEventListener('click', showResults);
    resetBtn.addEventListener('click', resetQuiz);
    function showResults() {
  if (submitted) return;
  submitted = true;
  let score = 0;

  questions.forEach((q, qi) => {
    const selected = form.querySelector(`input[name="q-${qi}"]:checked`);
    const correct = Number(q.answer);
    const qRoot = form.querySelector(`.q[data-qi="${qi}"]`);
    if (!qRoot) return;

    const labels = Array.from(qRoot.querySelectorAll('label'));

    labels.forEach((lab, idx) => {
      // Clear previous classes
      lab.classList.remove('correct','incorrect');

      // Mark correct answer
      if (idx === correct) {
        lab.classList.add('correct');
        const check = document.createElement('span');
        check.textContent = ' ';
        check.style.fontWeight = 'bold';
        lab.appendChild(check);
      }
    });

    // Mark wrong choice the user selected
    if (selected) {
      const chosen = Number(selected.value);
      if (chosen === correct) {
        score++;
      } else {
        const chosenLabel = selected.closest('label');
        if (chosenLabel) {
          chosenLabel.classList.add('incorrect');
          const cross = document.createElement('span');
          cross.textContent = ' ';
          cross.style.fontWeight = 'bold';
          chosenLabel.appendChild(cross);
        }
      }
    }
  });

  disableInputs(true);
  resultEl.textContent = `Score: ${score} / ${questions.length}`;
}

  });
})();
</script>
